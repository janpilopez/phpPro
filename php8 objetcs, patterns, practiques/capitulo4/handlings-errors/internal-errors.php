<?php
// The Internal Error Class
// Back when exceptions were first introduced, the world of trying and catching applied
// primarily to code written in PHP and not the core engine. Internally generated errors
// maintained their own logic. This could get messy if you wanted to manage core errors
// in the same way as code-generated exceptions. PHP 7 has made a start on addressing
// this issue with the Error class. This implements Throwable—the same built-in interface
// that the Exception class implements, and therefore it can be treated in the same way.
// This also means the methods described in Table 4-1 are honored. Error is subclassed
// for individual error types. Here’s how you might catch a parse error generated by an eval
// statement:
try {
    eval('illegal code');
} catch (\Error $e) {
    print get_class($e) . "\n";
    print $e->getMessage();
} catch (\Exception $e) {
    // do something with an Exception
}

// Here’s the output:
// ParseError syntax error, unexpected identifier "code"

// De esta manera, puede hacer coincidir algunos tipos de errores internos en los bloques catch, ya sea especificando
// la superclase Error o especificando una subclase más específica. La Tabla 4-2 muestra las
// subclases de Error actuales.

// Tabla 4-2. Clases de error integradas introducidas por PHP 7
// Error                    Descripción
// ArgumentCountError       Se genera cuando se pasan muy pocos argumentos a un método o función definidos por el usuario
// ArithmeticError          Se genera para errores relacionados con las matemáticas, en particular aquellos relacionados con la aritmética bit a bit
// AssertionError           Se genera cuando falla la construcción del lenguaje assert() (usada en la depuración)
// CompileError             Se genera cuando el código PHP está mal formado y no se puede compilar para ejecutarse
// DivisionByZeroError      Se genera cuando se intenta dividir un número por cero
// ParseError               Se genera cuando falla un intento de tiempo de ejecución de analizar PHP (por ejemplo, usando eval())
// TypeError                Se genera cuando se pasa un argumento del tipo incorrecto a un método, un método devuelve un valor del 
                            //tipo incorrecto o se pasa un número incorrecto de argumentos a un método